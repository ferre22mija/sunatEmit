import { app, BrowserWindow, ipcMain } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import NewSelenium from './ApiSunat/connect';


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();


};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.on('set-recieve', handleSetRecieve)
  ipcMain.handle('set-title',handleSetTitle)
  ipcMain.handle('get-configuration',getConfiguration)
  ipcMain.handle('set-configuration',setConfiguration)
  createWindow()
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});


async function handleSetRecieve(event: any, recieve: any) {
  // const webContents = event.sender
  // const win = BrowserWindow.fromWebContents(webContents)
  // win.setTitle(title)
  console.log(recieve);
  try {
    ChromeVersionFind();
    NewSelenium(recieve);
  } catch (error) {
    // Log any failures
    console.error('Test failed', error.message)
  }
}

async function handleSetTitle(event:any,title:any){
  console.log(title)
  const options = {
    method: 'GET',
    headers: {
      accept: 'application/json',
      authorization: 'Basic ZmVycmV0ZXJpYWNlcmFtaWNhc21pamFyZXNAZ21haWwuY29tOjBjNzE0YTRjNjE0MGJkYjdhYzg1'
    }
  };
  
  const nuevo:any = await fetch('https://api.alegra.com/api/v1/invoices', options)
    .then(response => response.json())
    .then((response:any) => {
      return response;
    })
  console.log(nuevo)
  return nuevo;
}

async function getConfiguration(){
  const config = require("./data/configurationAlegra.json");
  return config;
}

async function setConfiguration(event:any,config:any){
  console.log(config)
  const fs = require('fs');
  fs.writeFile("./src/data/configurationAlegra.json",JSON.stringify(config),'utf8',function (err:any) {
    if (err) {
        console.log("An error occured while writing JSON Object to File.");
        return console.log(err);
    }
 
    console.log("JSON file has been saved.");
})

}
const findChromeVersion = require("find-chrome-version")

const ChromeVersionFind = async () => {
    const chromeVersion = await findChromeVersion()
    console.log(`Your Chrome version is ${chromeVersion}`)
  }

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


